//
//  main.swift
//  playground218
//
//  Created by pulino4ka ‚úåüèª on 2.7.2025.
//

import Foundation


//Task 1.1
//–ü—Ä–æ—Ç–æ–∫–æ–ª Describable
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Describable —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ description —Ç–∏–ø–∞ String.
//–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Person –∏ –∫–ª–∞—Å—Å Car –∫–æ–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–º–∏ —ç—Ç–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É.
//–í—ã–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.

protocol Describable {
    var description: String {get}
}

struct Person: Describable {
    var name: String
    var surname: String
    var description: String
}

class Car: Describable {
    var brand: String
    var model: String
    var year: Int
    var description: String
    init(carBrand: String, carModel: String, carYear: Int, carDescription: String) {
        brand = carBrand
        model = carModel
        year = carYear
        description = carDescription
    }
    
}

//Task 1.2
//–ü—Ä–æ—Ç–æ–∫–æ–ª Comparable
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Comparable, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞.
//–†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∫–ª–∞—Å—Å–∞ Student, –≥–¥–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É.

protocol Comparable: Equatable {
    static func < (lhs: Self, rhs: Self) -> Bool 
    static func > (lhs: Self, rhs: Self) -> Bool
}

class Student: Comparable {
    var name: String
    var averageGrade: Double
    
    init(name: String, averageGrade: Double) {
        self.name = name
        self.averageGrade = averageGrade
    }
    
    static func > (lhs: Student, rhs: Student) -> Bool {
        return lhs.averageGrade > rhs.averageGrade
    }
    
    static func == (lhs: Student, rhs: Student) -> Bool {
        return lhs.averageGrade == rhs.averageGrade
    }
    
    static func < (lhs: Student, rhs: Student) -> Bool {
        return lhs.averageGrade < rhs.averageGrade
    }
}

var student1 = Student(name: "Ivan", averageGrade: 10)
var student2 = Student(name: "Masha", averageGrade: 15)


if student1 > student2 {
    print("–£ \(student1.name) –±–∞–ª–ª –≤—ã—à–µ, —á–µ–º —É \(student2.name)")
} else if student1 < student2 {
    print("–£ \(student2.name) –±–∞–ª–ª –≤—ã—à–µ, —á–µ–º —É \(student1.name)")
} else {
    print("–£ \(student1.name) –∏ \(student2.name) –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–∞–ª–ª—ã")
}

//Task 1.3
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ String
//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ String, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ isPalindrome(), –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.

extension String {
    func isPalindrome() -> Bool {
        if self.isEmpty {
            return false
        }
        if self.lowercased() == String(self.lowercased().reversed()) {
            return true
        } else {
            return false
        }
    }
}

var string = "dkfj"
print(string.isPalindrome())


//Task 1.4
//–ü—Ä–æ—Ç–æ–∫–æ–ª Equatable
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Equatable –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Point, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –¥–≤–µ —Ç–æ—á–∫–∏.

protocol Equatable {
    static func == (point1: Self, point2: Self) -> Bool
}

struct Point: Equatable {
    var x: Int
    var y: Int
    
    static func == (point1: Self, point2: Self) -> Bool {
        return point1.x == point2.x && point1.y == point2.y
    }
}

var point1 = Point(x: 6, y: 1)
var point2 = Point(x: 5, y: 1)

print(point1 == point2)


//Task 1.5
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Array
//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ (Array), –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ average(), –≤—ã—á–∏—Å–ª—è—é—â–∏–π —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ.

extension Array where Element: BinaryInteger {
    func average() -> Double {
        guard !self.isEmpty else {return 0}
        let sum = self.reduce(0, +)
        return Double(sum) / Double(self.count)
    }
}

extension Array where Element: BinaryFloatingPoint {
    func average() -> Double {
        guard !self.isEmpty else {return 0}
        let sum = self.reduce(0, +)
        return Double(sum) / Double(self.count)
    }
}
var strArr = ["fdf","dd","ds"]
var arr = Array(1...5)
var arrDouble = [0.1, 0.2, 0.3]
print(arr.average())
print(arrDouble.average())


//Task 2.1
//–ü—Ä–æ—Ç–æ–∫–æ–ª Identifiable
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Identifiable —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ id —Ç–∏–ø–∞ String.
//–°–¥–µ–ª–∞–π—Ç–µ –∫–ª–∞—Å—Å User –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Product –∫–æ–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–º–∏ —ç—Ç–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É.

protocol Identifiable {
    var id: String {get set}
}

class User: Identifiable {
    var username: String
    var id: String
    
    init(id: String, username: String) {
        self.id = id
        self.username = username
    }
}

struct Product: Identifiable {
    var title: String
    var id: String
}


// Task 2.2
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Int
//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ Int, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ isEven(), –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —á–µ—Ç–Ω—ã–º.
extension Int {
    func isEven() -> Bool {
        if self.isMultiple(of: 2) {
            return true
        } else {
            return false
        }
    }
}

var number = 10
print(number.isEven())


//Task 2.3
//–ü—Ä–æ—Ç–æ–∫–æ–ª CustomStringConvertible
//–†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª CustomStringConvertible –¥–ª—è –∫–ª–∞—Å—Å–∞ Book, —á—Ç–æ–±—ã –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä.


class Book: CustomStringConvertible {
    var title: String
    var author: String
    var description: String {
        return "\(title), \(author)"
    }
    init(title: String, author: String) {
        self.title = title
        self.author = author
    }
    
}

var book = Book(title: "Idiot", author: "Dostoevskiy")
print(book)

//Task 2.4
//–ü—Ä–æ—Ç–æ–∫–æ–ª Delegate
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–ª–µ–≥–∞—Ç–∞:
//–ö–ª–∞—Å—Å Timer –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –¥–µ–ª–µ–≥–∞—Ç–∞, –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è.
//–ö–ª–∞—Å—Å ViewController —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–µ–ª–µ–≥–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ.

protocol Delegate {
    func timerEnded()
}

class Timer {
    var delegate: Delegate?
    var time: Int
    init(delegate: Delegate? = nil, time: Int) {
        self.delegate = delegate
        self.time = time
    }
    func start(){
        while time > 0 {
            time -= 1
        }
        delegate?.timerEnded()
    }
    
}
 

class ViewController: Delegate {
    func timerEnded() {
        print("—Ç–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
    }
    
}

var timer = Timer(time: 5)
timer.delegate = ViewController()
timer.start()

//Task 2.5
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Dictionary
//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è (Dictionary), –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ keysAsString(), –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –≤—Å–µ –∫–ª—é—á–∏ –∫–∞–∫ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.

extension Dictionary {
    func keysAsString() -> String {
        var stringKeys  = self.keys.map{ "\($0)" }.joined(separator: ", ")
        return stringKeys
    }
}

var dict: Dictionary = ["first": 2, "second": 3, "third": 3]
print(dict.keysAsString())


//Task 3.1
//–ü—Ä–æ—Ç–æ–∫–æ–ª Observable
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Observable, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç–∞–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ —Å–≤–æ–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
//–ü—Ä–∏–º–µ—Ä: –∫–ª–∞—Å—Å Counter —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫, –∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏.

protocol Observable {
    func counterEdited(counter: Int)
}

class Counter {
    var observable: Observable?
    var counter: Int
    init(observable: Observable? = nil, counter: Int) {
        self.observable = observable
        self.counter = counter
    }
    func start() {
        while counter >= 0 {
            observable?.counterEdited(counter: counter)
            counter -= 1
        }
    }
}

class Spectator: Observable {
    func counterEdited(counter: Int) {
        print("–°—á–µ—Ç: \(counter) ")
    }
    
}

var counter = Counter(counter: 5)
counter.observable = Spectator()
counter.start()

//Task 3.2
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Double
//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ Double, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ roundToDecimal(places:), –æ–∫—Ä—É–≥–ª—è—é—â–∏–π —á–∏—Å–ª–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤.

extension Double {
    func roundToDecimal(places: Int) -> Double {
        let rounded = pow(10.0, Double(places))
        return (self * rounded).rounded() / rounded
    }
}

let double = 3.1545454
let rounded = double.roundToDecimal(places: 2)
print(rounded)

//Task 3.3
//–ü—Ä–æ—Ç–æ–∫–æ–ª Codable
//–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É User —Å –ø–æ–ª—è–º–∏ name –∏ age, –∫–æ—Ç–æ—Ä–∞—è –∫–æ–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—É Codable.
//–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä User –≤ JSON —Å—Ç—Ä–æ–∫—É –∏ –æ–±—Ä–∞—Ç–Ω–æ.

struct UserCodable: Codable {
    var name: String
    var age: Int
    
}

let user1 = UserCodable(name: "Polina", age: 21)

do {
    let jsonData = try JSONEncoder().encode(user1)
    let jsonString = String(data: jsonData, encoding: .utf8)!
    print(jsonString)
    
    let decodedUser = try JSONDecoder().decode(UserCodable.self, from: jsonData)
    print(decodedUser)
} catch {print(error)}

//Task 3.4
//–ü—Ä–æ—Ç–æ–∫–æ–ª Factory
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Factory, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ create() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.
//–†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∫–ª–∞—Å—Å–∞ CarFactory, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–æ–∫.

protocol Factory {
    func create() -> NewCar
}

class NewCar {
    var brand: String
    var model: String
    var year: Int
    
    init(brand: String, model: String, year: Int) {
        self.brand = brand
        self.model = model
        self.year = year
    }
    
}

class CarFactory: Factory {
    func create() -> NewCar{
        return NewCar(brand: "BMW", model: "X5", year: 2003)
    }

}

let factory = CarFactory()
let newCar = factory.create()
print(newCar.brand, newCar.model, newCar.year)

//Task 3.5
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (Collection), –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ removeAll(where:), —É–¥–∞–ª—è—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é.

extension RangeReplaceableCollection {
   mutating func removeAll(elem: (Element) -> Bool) {
       let filtered = self.filter { !elem($0) }
       self = Self(filtered)
    }
}


var array = [1,1,1,2,3,4,7,1]
array.removeAll(elem: {$0 > 1})
print(array)


//Task 4.1
//–ü—Ä–æ—Ç–æ–∫–æ–ª PaymentMethod
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª PaymentMethod, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ process(amount:), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂
//–†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ CreditCard –∏ PayPal.

protocol PaymentMethod {
     func process(amount: Double)
}

class CreditCard: PaymentMethod {
    var cardNumber: String
    var account: Double = 10000
 

    init(cardNumber: String) {
        self.cardNumber = cardNumber
        
    }
    
    func process(amount: Double) {
        account -= amount
        print("–ü–æ–∫—É–ø–∫–∞: \(amount) —Ä—É–±. –°—á–µ—Ç: \(account) —Ä—É–± ")
    }
    
}

class PayPal: PaymentMethod {
    var accountNumber: String
    var account: Double = 10000
    
    init(accountNumber: String) {
        self.accountNumber = accountNumber
    }
    
    func process(amount: Double) {
        account -= amount
        print("–ü–æ–∫—É–ø–∫–∞: \(amount) $. –°—á–µ—Ç: \(account) $ ")
    }
    
}

let method: PaymentMethod = CreditCard(cardNumber: "1222")
method.process(amount: 50)


//Task 4.2
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è URL
//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ URL, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ isValid(), –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–º.
extension URL {
    func isValid() -> Bool {
        return self.scheme != nil && self.host != nil
    }
}

let url = URL(string: "https://www.example.com")
print(url?.isValid())


//Task 4.3
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Observer, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç–∞–º –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥—Ä—É–≥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
//–ü—Ä–∏–º–µ—Ä: –∫–ª–∞—Å—Å WeatherStation –æ–ø–æ–≤–µ—â–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
protocol Observer {
    func weatherChanged(newTemp: Int, newWeather: String)
}

class WeatherStation {
    var weather: String
    var temperature: Int
    var observer: Observer?
    
    init(weather: String, temperature: Int, observer: Observer? = nil) {
        self.weather = weather
        self.temperature = temperature
        self.observer = observer
    }
    
    
    func updateWeather(newTemp: Int, newWeather: String) {
        observer?.weatherChanged(newTemp: newTemp, newWeather: newWeather)
    }
}

class Subscriber: Observer {
    func weatherChanged(newTemp: Int, newWeather: String) {
        print("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ \(newTemp) –∏ –ø–æ–≥–æ–¥–∞ \(newWeather)")
    }
}

let currWeather = WeatherStation(weather: "Sunny", temperature: 22)
currWeather.observer = Subscriber()
currWeather.updateWeather(newTemp: 25, newWeather: "Sunny")


//Task 4.4
//–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è Date
//–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ Date, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ daysUntil(date:), –≤—ã—á–∏—Å–ª—è—é—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã

extension Date {
    func daysUntil(date: Date) -> Int? {
        let calendar = Calendar.current

        let date1 = calendar.startOfDay(for: Date())
        let date2 = calendar.startOfDay(for: date)

        let components = calendar.dateComponents([.day], from: date1, to: date2)
        return components.day
    }
}

let currDate = Date()
let formatter = DateFormatter()
formatter.dateFormat = "dd.MM.yyyy"

if let newDate = formatter.date(from: "06.07.2025") {
    if let days = currDate.daysUntil(date: newDate) {
        print(days)
    } else {
        print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥")
    }
  
} else {
    print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞")
}

//Task 4.5
//–ü—Ä–æ—Ç–æ–∫–æ–ª Transformer
//–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Transformer, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ transform(input:), –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—â–∏–π –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
//–†–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∫–ª–∞—Å—Å–∞ TextEncryptor, –∫–æ—Ç–æ—Ä—ã–π —à–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç.

protocol Transformer {
    static func transform(input: String) -> String
}

class TextEncryptor: Transformer {
    static func transform(input: String) -> String {
        guard let data = input.data(using: .utf8) else {return "–û—à–∏–±–∫–∞"}
        
        return data.base64EncodedString()
    }
    

}
print(TextEncryptor.transform(input: "Hello"))
